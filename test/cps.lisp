
(declaim (optimize (debug 3)))

(in-package :arc/test)

(deftest t-equal/cps 
  (chk (%equal/cps '(a b) '(a b)))
  (chk (%equal/cps '(#\a 1) '(#\a 1)))
  (chk (%equal/cps '(#:k) '(#:z)))
  (chk (not (%equal/cps '(#:i #:i) '(#:a #:b))))
  (chk (not (%equal/cps '(#:i #:j) '(#:a #:a))))
  (chk (%equal/cps '(fn (#:k1) a b c) '(fn (#:k2) a b c)))
  (chk (%equal/cps '(#:k2 #:k3 1 #\a "b") '(#:a2 #:a3 1 #\a "b")))
  (chk (not (%equal/cps '(#:k2 #:k3 1 #\a "b") '(#:a3 #:a3 1 #\a "b")))))

(deftest c-simple
  (chkcps 'a "a")
  (chkcps #\a "#\\a")
  (chkcps "hi" "\"hi\"")
  (chkcps '(+ 1 x) "(+ 1 x)")
  (chkcps '(sqrt (+ 1 x)) "(sqrt (+ 1 x))"))

(deftest c-block
  (chkcps '(fn (#:k) (#:k a))     "(fn () a)")
  (chkcps '(fn (#:k) (#:k b))   "(fn () a b)")
  (chkcps '(fn (#:k) (#:k c)) "(fn () a b c)")
  (chkcps '(fn (#:k x) (#:k (+ 1 (sqrt x))))
	  "(fn (x) (+ 1 (sqrt x)))")
  (chkcps '(fn (#:k) (a (fn (#:r) (#:k b)) 1))
	  "(fn () (a 1) b)")
  (chkcps '(fn (#:k) (b (fn (#:r) (#:k c)) 1))
	  "(fn () a (b 1) c)")
  (chkcps '(fn (#:k) (b (fn (#:r) (#:k d)) 1))
	  "(fn () a (b 1) c d)")
  (chkcps '(fn (#:k) (a (fn (#:r) (#:k #:r)) 1))
	  "(fn () (a 1))")
  (chkcps '(fn (#:k) (a (fn (#:r1) (b (fn (#:r2) (#:k #:r2)) 2)) 1))
	  "(fn () (a 1) (b 2))"))

(deftest c-funcall
  (chkcps '(+) 
	  "(+)")
  (chkcps '(a (fn (#:k) #:k) (+)) 
	  "(a (+))")
  (chkcps '(b (fn (#:k1) (a (fn (#:k2) #:k2) #:k1)))
	  "(a (b))")
  (chkcps '(a (fn (#:k) #:k) (+ 1))
	  "(a (+ 1))")
  (chkcps '(b (fn (#:k1)
		(a (fn (#:k2) #:k2)
		   (+ 1)
		   #:k1))
	    2)
	  "(a (+ 1) (b 2))")
  (chkcps '(b (fn (#:k1) (a (fn (#:k2) (+ 1 #:k2)) 1 #:k1 3)) 2)
	  "(+ 1 (a 1 (b 2) 3))")
  (chkcps '(hi (fn (#:k)
		(+ 1 (- 2 #:k)))
	    (sqrt x))
	  "(+ 1 (- 2 (hi (sqrt x))))")
  (chkcps '(b (fn (#:r1) (a (fn (#:r2) #:r2) #:r1)) x)
	  "(a (b x))")
  (chkcps '(a (fn (#:r1) (+ #:r1 2)) x)
	  "(+ (a x) 2)")
  (chkcps '(a (fn (#:r1)
		(b (fn (#:r2) 
		     (+ #:r1 #:r2))
		 x))
	    1)
	  "(+ (a 1) (b x))")
  (chkcps '(b (fn (#:k1) 
		(a (fn (#:k2) 
		     (* #:k2 2)) 
		   (+ #:k1 1))) 
	    1)
	  "(* (a (+ (b 1) 1)) 2)")
  (chkcps '(fn (#:k x f) 
	    (f (fn (#:r1) 
		 (#:k #:r1))
	     (+ 1 x)))
	  "(fn (x f) (f (+ 1 x)))"))

(deftest c-if
  (chkcps '((fn (#:k) (if a (#:k b)))
	    (fn (#:r) #:r))
	  "(if a b)")
  (chkcps '((fn (#:k) (if a (#:k b) (#:k c))) 
	    (fn (#:r) #:r))
	  "(if a b c)")
  (chkcps '((fn (#:k) (if (< a b) (#:k c) (#:k d)))
	    (fn (#:r) #:r))
	  "(if (< a b) c d)")
  (chkcps '((fn (#:k) (a (fn (#:a) (if #:a (#:k x) (#:k y))) 1))
	    (fn (#:r) #:r))
	  "(if (a 1) x y)")
  (chkcps '((fn (#:k) (if a (x (fn (#:x) (#:k #:x)) 2) (#:k y)))
	    (fn (#:r) #:r))
	  "(if a (x 2) y)")
  (chkcps '((fn (#:k) 
	      (if a (#:k x) (#:k y))) 
	    (fn (#:r) (+ 1 #:r)))
	  "(+ 1 (if a x y))")
  (chkcps '((fn (#:k) 
	      (a (fn (#:r1) 
		   (if #:r1 (#:k x) (#:k y))) 
		 1))
	    (fn (#:x) (* 2 i #:x)))
	  "(* 2 i (if (a 1) x y))")
  (chkcps '((fn (#:k)
	     (if x (#:k 0)
		 y (#:k 1)
		 (a (fn (#:a) 
		       (if #:a (#:k 2) (#:k 3)))
		    0)))
	    (fn (#:r) #:r))
	  "(if x 0 y 1 (a 0) 2 3)")
  (chkcps '((fn (#:k)
	     (if a (#:k b)
		 c (#:k d)
		 (#:k e)))
	    (fn (#:r) #:r))
	  "(if a b c d e)")
  (chkcps '((fn (#:k)
	     (if x (#:k 0)
		 (a (fn (#:a) 
		      (if #:a (#:k 2) 
			  y (#:k 3) (#:k 4)))
		    1)))
	    (fn (#:r) #:r))
	  "(if x 0 (a 1) 2 y 3 4)")
  (chkcps '((fn (#:k)
	     (a (fn (#:a) 
		  (if #:a (#:k x)
		      (b (fn (#:b) 
			   (if #:b (#:k y) (#:k z)))
			 2)))
	        1))
	    (fn (#:r) #:r))
	  "(if (a 1) x (b 2) y z)"))

(deftest c-set 
  (chkcps '(set a 1) "(set a 1)")
  (chkcps '(:do (set a 1) (set b 2)) 
	  "(set a 1 b 2)")
  (chkcps '(b (fn (#:b) (+ 1 (set a #:b))) 2)
	  "(+ 1 (set a (b 2)))")
  (chkcps '(:do (set a 1) (c (fn (#:c) (set b #:c)) 2))
	  "(set a 1 b (c 2))")
  (chkcps '(:do (set a 1) (c (fn (#:c) (+ 1 (set b #:c))) 2))
	  "(+ 1 (set a 1 b (c 2)))"))